buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.1.+') {
            changing = true
        }
    }
}

apply plugin: 'forge'
apply plugin: 'maven'

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
	mavenCentral()
    maven {
        name = "OC repo"
        url = "https://maven.cil.li/"
    }
}

configurations {
    shade
    compile.extendsFrom shade
}


dependencies {
    compile "li.cil.oc:OpenComputers:MC1.7.10-1.6.+:dev"
	shade "javazoom:jlayer:1.0.1"
	shade "com.squareup.okhttp:okhttp:2.5.0"
	shade "com.googlecode.soundlibs:tritonus-share:0.3.7-2"
}

if (System.getenv().BUILD_NUMBER != null)
	ext.buildNumber = System.getenv().BUILD_NUMBER?.toInteger()
else
	ext.buildNumber = 0

version = "0.1.0"
group = "pcl.OpenFM"
archivesBaseName = "OpenFM-1.7.10"

minecraft {
	version = "1.7.10-10.13.4.1448-1.7.10"
	replace "@VERSION@", project.version
	replace "@BUILD@", project.ext.buildNumber
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

jar.classifier = "${ext.buildNumber}"
jar.manifest = manifest { attributes(
	"FMLCorePlugin": "pcl.OpenFM.misc.DepLoader",
	"FMLCorePluginContainsFMLMod": "icanhazfmlmodpweeze"
) }
def curseforge_key = 0
def curse_changlog = "default"
if (project.hasProperty('opensecurity_curseforge_key')) {
	curseforge_key = project.opensecurity_curseforge_key
	curse_changlog = project.changelog
}

apply plugin: 'curseforge'
curse {
	apiKey = curseforge_key
	projectId = "236839"
	releaseType = "release"
	changelog = curse_changlog
	addGameVersion project.minecraft.version
}

processResources {
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version + "." + project.ext.buildNumber, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// this is needed for IntelliJ so we don't have to copy over the assets manually every time
idea {
    module {
        outputDir = file('build/classes/main')
    }
}
